#!/usr/bin/python

import locale
import sys

from optparse import OptionParser

from bugz import cli
from bugz.cli import BugzError, LaxOptionParser, PrettyBugz

def main():
    if len(sys.argv) < 2:
        PrettyBugz.usage()
        sys.exit(-1)

    try:
        # do one global option search first to find those options
        # that are global across all sub commands.
        global_opts = PrettyBugz.options
        global_parser = LaxOptionParser(option_list = global_opts.values(),
                                        add_help_option = False)

        gopts, gargs = global_parser.parse_args()
        if gargs:
            cmd = gargs[0]
        else:
            PrettyBugz.usage()
            sys.exit(0)

        # gather options
        cmd_options = {}
        cmd_args = ''
        cmd_func = getattr(PrettyBugz, cmd, None)

        if cmd_func:
            cmd_options = getattr(cmd_func, "options", {})
            cmd_args = getattr(cmd_func, "args", "[options]")
        else:
            if not cmd == "--help" and not cmd == "-h":
                print '!! Error: Unable to recognise command: %s' % cmd
                print
            PrettyBugz.usage()
            sys.exit(-1)

        # parse options
        parser = OptionParser(usage = '%%prog %s %s' % (cmd, cmd_args),
                              description = cmd_func.__doc__,
                              option_list = cmd_options.values())
        opts, args = parser.parse_args(gargs[1:])

        # separate bugz options and cmd options
        bugz_kwds = {}
        for name, opt in global_opts.items():
            try:
                bugz_kwds[name] = getattr(gopts, name)
            except AttributeError:
                pass

        cmd_kwds = {}
        for name, opt in cmd_options.items():
            try:
                cmd_kwds[name] = getattr(opts, name)
            except AttributeError:
                pass

        try:
            bugz = PrettyBugz(**bugz_kwds)
            getattr(bugz, cmd)(*args, **cmd_kwds)
        except BugzError, e:
            print ' ! Error: %s' % e
            print
            parser.print_help()
            sys.exit(-1)
        except TypeError, e:
            print ' ! Error: Incorrect number of arguments supplied'
            print
            import traceback
            traceback.print_exc()
            parser.print_help()
            sys.exit(-1)
        except RuntimeError, e:
            print ' ! Error: %s' % e
            sys.exit(-1)

    except KeyboardInterrupt:
        print
        print 'Stopped.'
        sys.exit(-1)
    except:
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print '\n ! Exiting.'
